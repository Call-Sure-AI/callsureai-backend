name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Build
      run: npm run build

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: |
          dist
          package.json
          package-lock.json
        retention-days: 7
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: GITHUB_TOKEN
          script: |
            # Navigate to app directory
            mkdir -p ~/app
            cd ~/app
            
            # Configure Git credentials
            git config --global credential.helper store
            echo "https://$GITHUB_TOKEN:x-oauth-basic@github.com" > ~/.git-credentials
            
            # Pull latest code
            if [ -d "backend" ]; then
              cd backend
              git pull
            else
              git clone https://github.com/callsure-ai/callsureai-backend.git backend
              cd backend
            fi
            
            # Create/Update env file
            cat > .env << EOL
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            PORT=${{ secrets.PORT }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            NODE_ENV=production
            EOL
            
            # Ensure Docker is running
            sudo systemctl start docker
            
            # Build and restart containers
            docker compose --profile prod down
            docker compose --profile prod up --build
            
            # Clean up old images and git credentials
            docker system prune -af --volumes
            rm -f ~/.git-credentials

            # Print container status
            docker ps
            echo "Deployment completed"
