name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        touch .env
        echo "${{secrets.ENV_DATA}}" >> .env
      
    - name: Build
      run: npm run build

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: |
          dist
          package.json
          package-lock.json
        retention-days: 7
  deploy:
    runs-on: self-hosted
    needs: build
    environment:
      name: production
      url: ${{ steps.deploy-to-production.outputs.url }}
    steps : 
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with: 
          name: build-artifact
          path: dist

      - name: Deploy to EC2
        run: |
          echo "Deploying to EC2"
          cd /home/${{secrets.EC2_USERNAME}}/actions-runner/_work/callsureai-backend/callsureai-backend/
          
          echo "Stopping existing PM2 process if exists"
          pm2 delete docker-app || true
          
          echo "Stopping docker compose"
          docker compose --profile prod down

          echo "Creating PM2 startup script"
          cat > start-docker.sh << 'EOL'
          #!/bin/bash
          cd /home/${{secrets.EC2_USERNAME}}/actions-runner/_work/callsureai-backend/callsureai-backend/
          docker compose --profile prod up --build
          EOL
          
          chmod +x start-docker.sh
          
          echo "Starting with PM2"
          pm2 start ./start-docker.sh --name "docker-app"
          
          echo "Saving PM2 configuration"
          pm2 save

          echo "Cleaning up"
          docker system prune -af --volumes
          rm -f ~/.git-credentials

          echo "Final container status:"
          docker ps
          echo "Deployment completed"