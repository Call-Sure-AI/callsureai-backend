generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String          @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  accounts           Account[]
  activities         Activity[]
  agents             Agent[]
  ownedCompanies     Company[]       @relation("CompanyOwner")
  companyMemberships CompanyMember[]
  sessions           Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Agent {
  id                        String               @id @default(uuid())
  user_id                   String               @db.VarChar(255)
  name                      String               @db.VarChar(255)
  type                      String               @db.VarChar(255)
  company_id                String?
  prompt                    String
  additional_context        Json?                @db.Json
  confidence_threshold      Float?               @default(0.7)
  files                     String[]             @default([]) @db.VarChar(255)
  created_at                DateTime?            @default(now()) @db.Timestamp(6)
  updated_at                DateTime?            @default(now()) @updatedAt @db.Timestamp(6)
  template_id               String?              @db.VarChar(255)
  advanced_settings         Json?                @db.Json
  is_active                 Boolean              @default(true)
  average_confidence        Float?               @default(0.0)
  average_response_time     Float?               @default(0.0)
  database_integration_ids  String[]             @default([])
  image_processing_config   Json?                @default("{\"max_images\": 1000, \"confidence_threshold\": 0.7, \"enable_auto_description\": true}")
  image_processing_enabled  Boolean?             @default(false)
  knowledge_base_ids        String[]             @default([])
  max_response_tokens       Int?                 @default(200)
  search_config             Json?                @default("{\"limit\": 5, \"score_threshold\": 0.7, \"include_metadata\": true}")
  success_rate              Float?               @default(0.0)
  temperature               Float?               @default(0.7)
  total_interactions        Int?                 @default(0)
  companies                 Company?             @relation(fields: [company_id], references: [id], onDelete: Cascade)
  user                      User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  PromptTemplate            PromptTemplate?      @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_agent_template")
  agentInteractions         AgentInteraction[]   @relation("AgentToInteraction")
  previousAgentInteractions AgentInteraction[]   @relation("PreviousAgentToInteraction")
  conversations             Conversation[]
  documents                 Document[]
  imageProcessingJobs       ImageProcessingJob[]

  @@index([user_id], map: "idx_agents_user_id")
  @@index([template_id], map: "agent_template_id_idx")
}

model CompanyMember {
  id         String   @id @default(uuid())
  user_id    String
  company_id String
  role       String   @default("member")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, company_id])
  @@index([user_id])
  @@index([company_id])
}

model Company {
  id                     String                @id @default(uuid())
  user_id                String                @db.VarChar(255)
  name                   String                @db.VarChar(255)
  business_name          String                @db.VarChar(255)
  email                  String                @unique
  address                String                @db.VarChar(255)
  website                String?               @db.VarChar(255)
  logo                   String?               @db.VarChar(255)
  prompt_templates       Json?                 @default("{}")
  api_key                String?               @unique @db.VarChar(255)
  phone_number           String?               @unique @db.VarChar(20)
  created_at             DateTime?             @default(now()) @db.Timestamp(6)
  updated_at             DateTime?             @default(now()) @updatedAt @db.Timestamp(6)
  settings               Json?                 @db.Json
  active                 Boolean?              @default(true)
  average_response_time  Float?                @default(0.0)
  business_type          String?               @db.VarChar(100)
  current_image_storage  BigInt?               @default(0)
  image_config           Json?                 @default("{\"max_image_size\": 10485760, \"supported_formats\": [\"image/jpeg\", \"image/png\", \"image/gif\"], \"enable_auto_tagging\": true, \"retention_period_days\": 365, \"enable_explicit_content_detection\": true}")
  image_storage_limit    BigInt?               @default(10737418240)
  qdrant_collection_name String?               @unique
  total_conversations    Int?                  @default(0)
  vector_dimension       Int?                  @default(1536)
  task_success_rate      Float?
  average_task_latency   Float?
  task_count             Int                   @default(0)
  agents                 Agent[]
  calls                  Call[]
  user                   User                  @relation("CompanyOwner", fields: [user_id], references: [id], onDelete: Cascade)
  members                CompanyMember[]
  conversations          Conversation[]
  databaseIntegrations   DatabaseIntegration[]
  documents              Document[]
  imageProcessingJobs    ImageProcessingJob[]
  invitations            Invitation[]
  PromptTemplate         PromptTemplate[]

  @@index([user_id], map: "idx_companies_user_id")
}

model Invitation {
  id          String    @id @default(uuid())
  email       String
  company_id  String
  role        String    @default("member")
  token       String    @unique
  expires_at  DateTime
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  accepted_at DateTime?
  status      String    @default("pending")
  company     Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([company_id])
  @@index([email])
  @@index([status])
}

model Conversation {
  id                String             @id @default(uuid())
  customer_id       String             @db.VarChar(255)
  company_id        String?
  current_agent_id  String?
  history           Json?              @default("[]")
  meta_data         Json?              @db.Json
  created_at        DateTime?          @default(now()) @db.Timestamp(6)
  updated_at        DateTime?          @default(now()) @updatedAt @db.Timestamp(6)
  duration          Float?             @default(0.0)
  ended_at          DateTime?          @db.Timestamp(6)
  ended_by          String?            @db.VarChar(50)
  messages_count    Int?               @default(0)
  sentiment_score   Float?
  status            String?            @default("active") @db.VarChar(50)
  last_task_id      String?            @db.VarChar
  agentInteractions AgentInteraction[]
  companies         Company?           @relation(fields: [company_id], references: [id], onDelete: Cascade)
  agents            Agent?             @relation(fields: [current_agent_id], references: [id], onDelete: Cascade)
}

model Call {
  id              Int       @id @default(autoincrement())
  call_sid        String?   @unique @db.VarChar(255)
  company_id      String?
  from_number     String    @db.VarChar(20)
  to_number       String    @db.VarChar(20)
  status          String    @db.VarChar(50)
  duration        Float?
  recording_url   String?   @db.VarChar(255)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  answered_at     DateTime? @db.Timestamp(6)
  conversation_id String?
  cost            Float?    @default(0.0)
  ended_at        DateTime? @db.Timestamp(6)
  quality_score   Float?
  transcription   String?
  last_task_id    String?   @db.VarChar
  companies       Company?  @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([company_id], map: "idx_calls_company_id")
  @@index([created_at], map: "idx_calls_created_at")
  @@index([status], map: "idx_calls_status")
}

model Activity {
  id          String   @id @default(uuid())
  user_id     String   @db.VarChar(255)
  action      String   @db.VarChar(255)
  entity_type String   @db.VarChar(255)
  entity_id   String   @db.VarChar(255)
  metadata    Json?    @db.Json
  created_at  DateTime @default(now()) @db.Timestamp(6)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([entity_type, entity_id])
  @@index([created_at])
}

model Document {
  id                  String               @id @default(uuid())
  company_id          String?
  agent_id            String?
  name                String               @db.VarChar(255)
  type                String
  content             String
  file_type           String?              @db.VarChar(50)
  file_size           Int?
  original_filename   String?              @db.VarChar(255)
  width               Int?
  height              Int?
  image_format        String?              @db.VarChar(20)
  is_image            Boolean?             @default(false)
  user_description    String?
  auto_description    String?
  embedding_id        String?              @db.VarChar(255)
  last_embedded       DateTime?
  chunk_count         Int?                 @default(0)
  created_at          DateTime?            @default(now()) @db.Timestamp(6)
  updated_at          DateTime?            @default(now()) @updatedAt @db.Timestamp(6)
  image_metadata      Json?
  image_content       Bytes?
  embedding           Float[]
  agent               Agent?               @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  company             Company?             @relation(fields: [company_id], references: [id], onDelete: Cascade)
  imageProcessingJobs ImageProcessingJob[]

  @@index([company_id])
  @@index([agent_id])
}

model AgentInteraction {
  id                String       @id @default(uuid())
  agent_id          String
  conversation_id   String
  query             String
  response          String
  confidence_score  Float
  response_time     Float
  tokens_used       Int?
  was_successful    Boolean?
  previous_agent_id String?
  context_window    Json?
  created_at        DateTime     @default(now()) @db.Timestamp(6)
  last_task_id      String?      @db.VarChar
  agent             Agent        @relation("AgentToInteraction", fields: [agent_id], references: [id], onDelete: Cascade)
  conversation      Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  previousAgent     Agent?       @relation("PreviousAgentToInteraction", fields: [previous_agent_id], references: [id])

  @@index([agent_id])
  @@index([conversation_id])
}

model DatabaseIntegration {
  id                 String    @id @default(uuid())
  company_id         String
  name               String    @db.VarChar(255)
  type               String
  connection_details Json      @db.Json
  schema_mapping     Json?     @default("{}") @db.Json
  included_tables    String[]  @default([])
  excluded_tables    String[]  @default([])
  sync_frequency     String?   @default("daily") @db.VarChar(50)
  last_sync          DateTime?
  is_active          Boolean?  @default(true)
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  company            Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([company_id])
}

model ImageProcessingJob {
  id                String    @id @default(uuid())
  document_id       String
  company_id        String
  agent_id          String
  status            String    @default("pending") @db.VarChar(50)
  error_message     String?
  processing_config Json?     @db.Json
  results           Json?     @db.Json
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  completed_at      DateTime?
  agent             Agent     @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  company           Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  document          Document  @relation(fields: [document_id], references: [id])

  @@index([document_id])
  @@index([company_id])
  @@index([agent_id])
  @@index([status])
}

model PromptTemplate {
  id          String                 @id @db.VarChar
  name        String                 @db.VarChar(255)
  description String?
  content     String
  category    prompttemplatecategory
  agent_type  agenttype
  variables   Json?                  @default("[]")
  is_default  Boolean?               @default(false)
  is_system   Boolean?               @default(false)
  company_id  String?                @db.VarChar
  user_id     String?                @db.VarChar
  created_at  DateTime?              @default(now()) @db.Timestamp(6)
  updated_at  DateTime?              @default(now()) @db.Timestamp(6)
  Agent       Agent[]
  Company     Company?               @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([agent_type], map: "prompt_template_agent_type_idx")
  @@index([category], map: "prompt_template_category_idx")
  @@index([company_id], map: "prompt_template_company_id_idx")
}

model TaskQueue {
  id              String    @id @db.VarChar
  task_type       String    @db.VarChar(50)
  status          String    @default("pending") @db.VarChar(20)
  parameters      Json?
  result          Json?
  error_message   String?
  retry_count     Int       @default(0)
  max_retries     Int       @default(3)
  next_retry_at   DateTime? @db.Timestamp(6)
  company_id      String?   @db.VarChar
  agent_id        String?   @db.VarChar
  conversation_id String?   @db.VarChar
  call_id         String?   @db.VarChar
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  started_at      DateTime? @db.Timestamp(6)
  completed_at    DateTime? @db.Timestamp(6)

  @@index([company_id], map: "ix_taskqueue_company_id")
  @@index([status, next_retry_at], map: "ix_taskqueue_status_retry")
  @@index([task_type], map: "ix_taskqueue_task_type")
}

enum agenttype {
  base
  sales
  support
  technical
  custom
}

enum prompttemplatecategory {
  general
  customer_service
  sales
  booking
  technical
  content
  educational
  research
  industry_specific
}
