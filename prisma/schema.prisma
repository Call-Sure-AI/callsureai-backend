generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model agents {
  id                   String          @id @default(uuid())
  name                 String          @db.VarChar(255)
  type                 String          @db.VarChar(255)
  company_id           String?
  prompt               String
  additional_context   Json?           @db.Json
  confidence_threshold Float?
  created_at           DateTime?       @db.Timestamp(6)
  updated_at           DateTime?       @db.Timestamp(6)
  template_id          String?         @db.VarChar(255)
  companies            companies?      @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  conversations        conversations[]
}

model companies {
  id               String          @id @default(uuid())
  name             String          @db.VarChar(255)
  api_key          String          @unique @db.VarChar(255)
  created_at       DateTime?       @db.Timestamp(6)
  updated_at       DateTime?       @db.Timestamp(6)
  settings         Json?           @db.Json
  prompt_templates Json            @default("{}")
  phone_number     String?         @unique @db.VarChar(20)
  agents           agents[]
  calls            calls[]
  conversations    conversations[]
}

model conversations {
  id               String     @id @default(uuid())
  customer_id      String     @db.VarChar(255)
  company_id       String?
  current_agent_id String?
  history          Json?
  meta_data        Json?      @db.Json
  created_at       DateTime?  @db.Timestamp(6)
  updated_at       DateTime?  @db.Timestamp(6)
  companies        companies? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  agents           agents?    @relation(fields: [current_agent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model calls {
  id            Int        @id @default(autoincrement())
  call_sid      String?    @unique @db.VarChar(255)
  company_id    String?
  from_number   String     @db.VarChar(20)
  to_number     String     @db.VarChar(20)
  status        String     @db.VarChar(50)
  duration      Int?
  recording_url String?    @db.VarChar(255)
  created_at    DateTime?  @default(now()) @db.Timestamp(6)
  updated_at    DateTime?  @default(now()) @db.Timestamp(6)
  companies     companies? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([company_id], map: "idx_calls_company_id")
  @@index([created_at], map: "idx_calls_created_at")
  @@index([status], map: "idx_calls_status")
}
